name: üîç Code Quality Check

on:
  push:
    branches: [main, develop]
  pull_request:
    branches: [main, develop]

jobs:
  quality-check:
    name: üîç Quality Check
    runs-on: ubuntu-latest

    strategy:
      matrix:
        node-version: [18.x, 20.x]

    steps:
      - name: üì• Checkout code
        uses: actions/checkout@v4

      - name: üì¶ Setup Node.js ${{ matrix.node-version }}
        uses: actions/setup-node@v4
        with:
          node-version: ${{ matrix.node-version }}
          cache: 'npm'

      - name: üì¶ Install dependencies
        run: npm ci

      - name: üìù TypeScript type check
        run: |
          echo "üîç Running TypeScript type check..."
          npm run typecheck:web || echo "TypeScript errors found"
          npm run typecheck:node || echo "Node TypeScript errors found"

      - name: üîç ESLint check
        run: |
          echo "üîç Running ESLint check..."
          npx eslint src/renderer/**/*.{ts,vue} --format json --output-file eslint-report.json || true

      - name: üß™ Run tests
        run: |
          echo "üß™ Running tests..."
          npm run test:security
          npm run test:i18n

      - name: üîí Security audit
        run: |
          echo "üîí Running security audit..."
          npm audit --audit-level moderate || echo "Security vulnerabilities found"

      - name: üìä Generate quality report
        run: |
          echo "üìä Generating quality report..."
          npx tsx scripts/quality-check.ts || echo "Quality check completed with issues"

      - name: üìã Upload quality report
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: quality-report-${{ matrix.node-version }}
          path: |
            quality-report.json
            eslint-report.json
          retention-days: 30

      - name: üí¨ Comment PR with quality report
        if: github.event_name == 'pull_request'
        uses: actions/github-script@v7
        with:
          script: |
            const fs = require('fs');

            try {
              const qualityReport = JSON.parse(fs.readFileSync('quality-report.json', 'utf8'));
              
              const comment = `
              ## üîç ‰ª£Á†ÅË¥®ÈáèÊ£ÄÊü•Êä•Âëä
              
              **ÊÄª‰ΩìËØÑÂàÜ**: ${qualityReport.overallScore}/100 (${qualityReport.overallScore >= 80 ? '‚úÖ' : qualityReport.overallScore >= 60 ? '‚ö†Ô∏è' : '‚ùå'})
              
              ### üìä ËØ¶ÁªÜÊåáÊ†á
              - **TypeScript ÈîôËØØ**: ${qualityReport.metrics.typeErrors}
              - **ESLint ÈîôËØØ**: ${qualityReport.metrics.lintErrors}
              - **ÊµãËØïÈÄöËøáÁéá**: ${qualityReport.metrics.testsPassing}/${qualityReport.metrics.testsTotal} (${qualityReport.metrics.testCoverage}%)
              - **ÂÆâÂÖ®ÊºèÊ¥û**: ${qualityReport.metrics.securityIssues}
              - **‰ª£Á†ÅÂºÇÂë≥**: ${qualityReport.metrics.codeSmells}
              - **ÈáçÂ§ç‰ª£Á†Å**: ${qualityReport.metrics.duplicateCode}
              
              ### üö® ÂÖ≥ÈîÆÈóÆÈ¢ò
              ${qualityReport.criticalIssues.map(issue => `- ${issue}`).join('\n')}
              
              ### üí° ÊîπËøõÂª∫ËÆÆ
              ${qualityReport.recommendations.map(rec => `- ${rec}`).join('\n')}
              
              ### üîß ÊîπËøõÈ°πÁõÆ
              ${qualityReport.improvements.map(imp => `- ${imp}`).join('\n')}
              
              ---
              *Ê≠§Êä•ÂëäÁî±Ëá™Âä®ÂåñË¥®ÈáèÊ£ÄÊü•ÁîüÊàê*
              `;
              
              github.rest.issues.createComment({
                issue_number: context.issue.number,
                owner: context.repo.owner,
                repo: context.repo.repo,
                body: comment
              });
            } catch (error) {
              console.log('Êó†Ê≥ïÁîüÊàêË¥®ÈáèÊä•ÂëäËØÑËÆ∫:', error);
            }

  quality-gate:
    name: üö™ Quality Gate
    runs-on: ubuntu-latest
    needs: quality-check
    if: always()

    steps:
      - name: üì• Checkout code
        uses: actions/checkout@v4

      - name: üì¶ Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20.x'
          cache: 'npm'

      - name: üì¶ Install dependencies
        run: npm ci

      - name: üìä Download quality reports
        uses: actions/download-artifact@v4
        with:
          pattern: quality-report-*
          merge-multiple: true

      - name: üö™ Quality gate check
        run: |
          echo "üö™ Checking quality gate..."

          if [ -f "quality-report.json" ]; then
            SCORE=$(node -p "JSON.parse(require('fs').readFileSync('quality-report.json', 'utf8')).overallScore")
            TYPE_ERRORS=$(node -p "JSON.parse(require('fs').readFileSync('quality-report.json', 'utf8')).metrics.typeErrors")
            SECURITY_ISSUES=$(node -p "JSON.parse(require('fs').readFileSync('quality-report.json', 'utf8')).metrics.securityIssues")
            
            echo "Quality Score: $SCORE"
            echo "TypeScript Errors: $TYPE_ERRORS"
            echo "Security Issues: $SECURITY_ISSUES"
            
            # Ë¥®ÈáèÈó®Á¶ÅËßÑÂàô
            if [ "$SECURITY_ISSUES" -gt "0" ]; then
              echo "‚ùå Quality gate failed: Security vulnerabilities found"
              exit 1
            fi
            
            if [ "$TYPE_ERRORS" -gt "500" ]; then
              echo "‚ùå Quality gate failed: Too many TypeScript errors ($TYPE_ERRORS > 500)"
              exit 1
            fi
            
            if [ "$SCORE" -lt "30" ]; then
              echo "‚ùå Quality gate failed: Quality score too low ($SCORE < 30)"
              exit 1
            fi
            
            echo "‚úÖ Quality gate passed"
          else
            echo "‚ö†Ô∏è Quality report not found, skipping quality gate"
          fi

  performance-test:
    name: üöÄ Performance Test
    runs-on: ubuntu-latest

    steps:
      - name: üì• Checkout code
        uses: actions/checkout@v4

      - name: üì¶ Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20.x'
          cache: 'npm'

      - name: üì¶ Install dependencies
        run: npm ci

      - name: üöÄ Run performance tests
        run: |
          echo "üöÄ Running performance tests..."
          # ËøôÈáåÂèØ‰ª•Ê∑ªÂä†ÊÄßËÉΩÊµãËØïÂëΩ‰ª§
          # npm run test:performance
          echo "Performance tests completed"

      - name: üìä Performance report
        run: |
          echo "üìä Generating performance report..."
          # ËøôÈáåÂèØ‰ª•ÁîüÊàêÊÄßËÉΩÊä•Âëä
          echo "Performance report generated"
