<!--
  基础按钮组件
  提供统一的按钮样式和行为，消除项目中重复的按钮实现
-->
<template>
  <button
    :type="type"
    :disabled="disabled || loading"
    :class="buttonClasses"
    @click="handleClick"
  >
    <!-- 加载状态 -->
    <div
      v-if="loading"
      class="loading-spinner w-4 h-4 mr-2"
    ></div>

    <!-- 图标 -->
    <slot name="icon" />

    <!-- 文本内容 -->
    <span
      v-if="$slots.default"
      :class="{ 'ml-2': $slots.icon }"
    >
      <slot />
    </span>
  </button>
</template>

<script setup lang="ts">
    interface Props {
  /** 按钮变体 */
      variant?: 'primary' | 'secondary' | 'ghost' | 'danger';
      /** 按钮尺寸 */
      size?: 'sm' | 'md' | 'lg';
      /** 按钮类型 */
      type?: 'button' | 'submit' | 'reset';
      /** 是否禁用 */
      disabled?: boolean;
      /** 是否加载中 */
      loading?: boolean;
      /** 是否为图标按钮 */
      iconOnly?: boolean;
      /** 是否为圆形按钮 */
      round?: boolean;
      /** 自定义类名 */
      class?: string;

  }

    interface Emits {
  (e: 'click', event: MouseEvent): void;

  }

    const props = withDefaults(defineProps<Props>(), {
      variant: 'primary',
      size: 'md',
      type: 'button',
      disabled: false,
      loading: false,
      iconOnly: false,
      round: false,
    });

    const emit = defineEmits<Emits>();

    const buttonClasses = computed(() => [
      'base-button',
      `base-button--${props.variant}`,
      `base-button--${props.size}`,
      {
        'base-button--icon-only': props.iconOnly,
        'base-button--round': props.round,
        'base-button--loading': props.loading,
      },
      props.class]);

    const handleClick = (event:, MouseEvent) => {
      if (!props.disabled && !props.loading) {
        emit('click', event);
      }
    }
</script>

<style scoped>
  .base-button {
    @apply btn-base inline-flex items-center justify-center;
    @apply focus:outline-none focus:ring-2 focus:ring-green-500 focus:ring-opacity-50;
  }

  /* 变体样式 */
  .base-button--primary {
    @apply bg-green-600 text-white hover:bg-green-700;
    @apply disabled:bg-gray-400 disabled:cursor-not-allowed;
  }

  .base-button--secondary {
    @apply bg-gray-200 text-gray-900 hover:bg-gray-300;
    @apply dark:bg-gray-700 dark:text-white dark:hover:bg-gray-600;
    @apply disabled:bg-gray-100 disabled:text-gray-400 disabled:cursor-not-allowed;
  }

  .base-button--ghost {
    @apply bg-transparent text-gray-600 hover:bg-gray-100;
    @apply dark:text-gray-400 dark:hover:bg-gray-800;
    @apply disabled:text-gray-400 disabled:cursor-not-allowed;
  }

  .base-button--danger {
    @apply bg-red-600 text-white hover:bg-red-700;
    @apply disabled:bg-gray-400 disabled:cursor-not-allowed;
  }

  /* 尺寸样式 */
  .base-button--sm {
    @apply px-3 py-1.5 text-sm;
  }

  .base-button--md {
    @apply px-4 py-2 text-base;
  }

  .base-button--lg {
    @apply px-6 py-3 text-lg;
  }

  /* 特殊样式 */
  .base-button--icon-only {
    @apply p-2;
  }

  .base-button--icon-only.base-button--sm {
    @apply p-1.5;
  }

  .base-button--icon-only.base-button--lg {
    @apply p-3;
  }

  .base-button--round {
    @apply rounded-full;
  }

  .base-button--loading {
    @apply cursor-wait;
  }

  /* 响应式调整 */
  @media (max-width: , 768px) {
    .base-button--lg {
      @apply px-4 py-2 text-base;
    }
  }
</style>
