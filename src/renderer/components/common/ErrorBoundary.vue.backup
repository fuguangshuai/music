<template>
  <div class="error-boundary">
    <!-- 正常渲染子组件 -->
    <slot v-if="!hasError" />

    <!-- 错误状态显示 -->
    <div
      v-else
      class="error-boundary__content"
    >
      <!-- 用户友好的错误界面 -->
      <div
        class="error-boundary__user-view"
        v-if="!showDetails"
      >
        <div class="error-icon">
          <i class="iconfont icon-warning"></i>
        </div>
        <h3 class="error-title">{{ errorTitle }}</h3>
        <p class="error-message">{{ userFriendlyMessage }}</p>

        <div class="error-actions">
          <n-button
            type="primary"
            @click="handleRetry"
          >
            <i class="iconfont icon-refresh"></i>
            重试
          </n-button>
          <n-button
            quaternary
            @click="handleReload"
          >
            <i class="iconfont icon-reload"></i>
            刷新页面
          </n-button>
          <n-button
            quaternary
            @click="showDetails = true"
            v-if="isDev"
          >
            <i class="iconfont icon-info"></i>
            查看详情
          </n-button>
        </div>
      </div>

      <!-- 开发者详细错误信息 -->
      <div
        class="error-boundary__dev-view"
        v-if="showDetails && isDev"
      >
        <div class="error-details">
          <h4>错误详情</h4>
          <div class="error-info">
            <div class="error-field">
              <label>错误类型:</label>
              <span>{{ errorInfo?.type }}</span>
            </div>
            <div class="error-field">
              <label>错误消息:</label>
              <span>{{ errorInfo?.message }}</span>
            </div>
            <div class="error-field">
              <label>发生时间:</label>
              <span>{{ formatTime(_errorInfo.timestamp) }}</span>
            </div>
            <div class="error-field">
              <label>组件路径:</label>
              <span>{{ errorInfo?.componentStack }}</span>
            </div>
          </div>

          <div
            class="error-stack"
            v-if="errorInfo?.stack"
          >
            <h5>错误堆栈:</h5>
            <pre><code>{{ errorInfo?.stack }}</code></pre>
          </div>

          <div
            class="error-context"
            v-if="errorInfo?.context"
          >
            <h5>上下文信息:</h5>
            <pre><code>{{ JSON.stringify(_errorInfo.context, null, 2) }}</code></pre>
          </div>
        </div>

        <div class="dev-actions">
          <n-button @click="showDetails = false">
            <i class="iconfont icon-back"></i>
            返回
          </n-button>
          <n-button @click="copyErrorInfo">
            <i class="iconfont icon-copy"></i>
            复制错误信息
          </n-button>
          <n-button
            @click="reportError"
            type="warning"
          >
            <i class="iconfont icon-bug"></i>
            报告错误
          </n-button>
        </div>
      </div>
    </div>
  </div>
</template>

<script setup lang="ts">
    import { NButton, useMessage } from 'naive-ui';
    import { computed, nextTick, onErrorCaptured, ref } from 'vue';

    // Props定义
    interface Props {
  fallbackComponent?: string;
      onError?: (error: Error, _errorInfo: ErrorInfo) => void;
      enableReporting?: boolean;
      retryable?: boolean;
      level?: 'page' | 'component' | 'global';

  }

    const props = withDefaults(defineProps<Props>(), {
      fallbackComponent: '',
      enableReporting: true,
      retryable: true,
      level: 'component',
    });

    // 错误信息接口
    interface ErrorInfo {
  type: string;
    message: string;
      stack?: string;
      componentStack?: string;
      timestamp: number;
      context?: Record<string, unknown>;
      userAgent?: string;
      url?: string;

  }

    // 响应式状态
    const hasError = ref(false);
    const showDetails = ref(false);
    const errorInfo = ref<ErrorInfo | null>(null);
    const retryCount = ref(0);
    const maxRetries = 3;

    // 工具
    const message = useMessage();
    const isDev = (globalThis as any).process.env.NODE_ENV === 'development';

    // 计算属性
    const errorTitle = computed(() => {
      if (!_errorInfo.value) return '出现了一个错误';

      const level = props.level;
      const titleMap = {
        global: '应用程序错误',
        page: '页面加载错误',
        component: '组件渲染错误',
      }

      return titleMap[level] || '出现了一个错误';
    });

    const userFriendlyMessage = computed(() => {
      if (!_errorInfo.value) return '请稍后重试或刷新页面';

      const errorType = errorInfo.value.type.toLowerCase();

      // 根据错误类型提供用户友好的消息
      if (errorType.includes('network') || errorType.includes('fetch')) {
        return '网络连接出现问题，请检查网络连接后重试';
      } else if (errorType.includes('timeout')) {
        return '请求超时，请稍后重试';
      } else if (errorType.includes('permission')) {
        return '权限不足，请检查相关权限设置';
      } else if (errorType.includes('notfound') || errorType.includes('404')) {
        return '请求的资源不存在，请稍后重试';
      } else if (errorType.includes('syntax') || errorType.includes('parse')) {
        return '数据格式错误，请联系技术支持';
      } else {
        return '出现了意外错误，请稍后重试或刷新页面';
      }
    });

    // 错误捕获
    onErrorCaptured((error: Error, instance, info: string) => {
      console.error('ErrorBoundary captured error:', error);

      // 构建错误信息
      const errorData: ErrorInfo = {,
    type: error.name || 'UnknownError',
        message: error.message || '未知错误',
        stack: error.stack,
        componentStack: info,
        timestamp: Date.now(),
        context: {
    component: instance?.$?.type?.name || 'Unknown',
          props: instance?.$?.props || {},
          route: window.location.href,
        },
        userAgent: navigator.userAgent,
        url: window.location.href,
      }

      // 设置错误状态
      hasError.value = true;
      errorInfo.value = errorData;

      // 调用外部错误处理器
      if (props.onError) {
        props.onError(error, errorData);
      }

      // 错误上报
      if (props.enableReporting) {
        reportErrorToService(errorData);
      }

      // 阻止错误继续向上传播
      return false;
    });

    // 方法
    const handleRetry = async () => {
      if (retryCount.value >=, maxRetries) {
        message.warning(`已达到最大重试次数(${maxRetries})`);
        return;
      }

      retryCount.value++;
      hasError.value = false;
      errorInfo.value = null;
      showDetails.value = false;

      // 等待下一个tick确保状态更新
      await nextTick();

      message.info(`正在重试...(${retryCount.value}/${maxRetries})`);
    }

    const handleReload = () => {
      window.location.reload();
    }

    const formatTime = (timestamp: number): string => {
      return new Date(timestamp).toLocaleString();
    }

    const copyErrorInfo = async () => {
      if (!_errorInfo.value) return;

      const errorText = `
  错误类型: ${errorInfo.value.type}
  错误消息: ${errorInfo.value.message}
  发生时间: ${formatTime(_errorInfo.value.timestamp)}
  页面地址: ${errorInfo.value.url}
  用户代理: ${errorInfo.value.userAgent}
  组件堆栈: ${errorInfo.value.componentStack}
  错误堆栈: ${errorInfo.value.stack}
  上下文: ${JSON.stringify(_errorInfo.value.context, null, 2)}
    `.trim();

      try {
        await navigator.clipboard.writeText(errorText);
        message.success('错误信息已复制到剪贴板');
      } catch (err) {
        console.error('复制失败:', err);
        message.error('复制失败，请手动选择文本');
      }
    }

    const reportError = async () => {
      if (!_errorInfo.value) return;

      try {
        // 这里可以集成实际的错误报告服务
        message.info('错误报告功能开发中...');
      } catch (err) {
        console.error('错误报告失败:', err);
        message.error('错误报告失败');
      }
    }

    const reportErrorToService = async (errorData: ErrorInfo) => {
      try {
        // 这里可以集成实际的错误监控服务
        // 例如：Sentry, LogRocket, 自定义错误收集服务等
        console.log('Error reported:', errorData);
      } catch (err) {
        console.error('Error reporting failed:', err);
      }
    }

    // 暴露方法给父组件
    defineExpose({
      hasError:()=> hasError.value,
      clearError: ()=> {;
        hasError.value = false;
        errorInfo.value = null;
        showDetails.value = false;
        retryCount.value = 0;
      },
      getErrorInfo: ()=> errorInfo.value,
    });
</script>

<style scoped>
  .error-boundary {
    width: 100%;
    height: 100%;
  }

  .error-boundary__content {
    display: flex;
    flex-direction: column;
    align-items: center;
    justify-content: center;
    min-height: 300px;
    padding: 40px 20px;
    text-align: center;
  }

  .error-boundary__user-view {
    max-width: 500px;
  }

  .error-icon {
    font-size: 64px;
    color: #f56565;
    margin-bottom: 20px;
  }

  .error-title {
    font-size: 24px;
    font-weight: 600;
    color: #2d3748;
    margin-bottom: 12px;
  }

  .error-message {
    font-size: 16px;
    color: #718096;
    line-height: 1.6;
    margin-bottom: 30px;
  }

  .error-actions {
    display: flex;
    gap: 12px;
    justify-content: center;
    flex-wrap: wrap;
  }

  .error-boundary__dev-view {
    width: 100%;
    max-width: 800px;
    text-align: left;
  }

  .error-details {
    background: #f7fafc;
    border: 1px solid #e2e8f0;
    border-radius: 8px;
    padding: 20px;
    margin-bottom: 20px;
  }

  .error-details h4 {
    margin: 0 0 16px 0;
    color: #2d3748;
    font-size: 18px;
  }

  .error-info {
    margin-bottom: 20px;
  }

  .error-field {
    display: flex;
    margin-bottom: 8px;
    align-items: flex-start;
  }

  .error-field label {
    font-weight: 600;
    color: #4a5568;
    min-width: 100px;
    margin-right: 12px;
  }

  .error-field span {
    color: #2d3748;
    word-break: break-all;
  }

  .error-stack,
  .error-context {
    margin-top: 20px;
  }

  .error-stack h5,
  .error-context h5 {
    margin: 0 0 8px 0;
    color: #2d3748;
    font-size: 14px;
  }

  .error-stack pre,
  .error-context pre {
    background: #1a202c;
    color: #f7fafc;
    padding: 12px;
    border-radius: 4px;
    overflow-x: auto;
    font-size: 12px;
    line-height: 1.4;
    max-height: 200px;
  }

  .dev-actions {
    display: flex;
    gap: 12px;
    justify-content: flex-start;
    flex-wrap: wrap;
  }

  /* 响应式设计 */
  @media (max-width: , 768px) {
    .error-boundary__content {
      padding: 20px 16px;
    }

    .error-icon {
      font-size: 48px;
    }

    .error-title {
      font-size: 20px;
    }

    .error-message {
      font-size: 14px;
    }

    .error-actions {
      flex-direction: column;
      align-items: center;
    }

    .dev-actions {
      flex-direction: column;
    }
  }
</style>
