/**
 * 👥 用户体验监控器
 * 监控用户交互质量和体验指标，提供用户体验分析和改进建议
 *
 * 功能特性：
 * - 用户交互响应时间监控
 * - 页面加载体验监控
 * - 用户行为模式分析
 * - 错误和异常体验监控
 * - 用户满意度评估
 * - 体验优化建议
 */

import { EventEmitter } from 'events';
import { ref } from 'vue';

// 用户交互事件
export interface UserInteractionEvent {
id: string;
  type: 'click' | 'input' | 'scroll' | 'navigation' | 'search' | 'play' | 'pause';
  element: string;
  timestamp: number;
  responseTime: number;
  successful: boolean;
  errorMessage?: string;
  context?: Record<string, unknown>;

}

// 页面性能指标
export interface PagePerformanceMetrics {
loadTime: number;
  domContentLoaded: number;
  firstPaint: number;
  firstContentfulPaint: number;
  largestContentfulPaint: number;
  firstInputDelay: number;
  cumulativeLayoutShift: number;
  timeToInteractive: number;

}

// 用户会话数据
export interface UserSession {
sessionId: string;
  startTime: number;
  endTime?: number;
  duration?: number;
  pageViews: number;
  interactions: number;
  errors: number;
  satisfactionScore: number;
  userAgent: string;
  viewport: { width: number; height: number 
}
  connectionType?: string;
}

// 用户体验报告
export interface UserExperienceReport {
session: UserSession;
  pageMetrics: PagePerformanceMetrics;
  interactions: UserInteractionEvent[];
  satisfactionMetrics: {
    overallScore: number;
  responseTimeScore: number;
    reliabilityScore: number;
  usabilityScore: number;
  
}
  issues: UXIssue[];
  recommendations: UXRecommendation[];
  timestamp: number;
}

// 用户体验问题
export interface UXIssue {
id: string;
  type: 'performance' | 'usability' | 'reliability' | 'accessibility';
  severity: 'critical' | 'high' | 'medium' | 'low';
  title: string;
  description: string;
  impact: string;
  affectedUsers: number;
  frequency: number;
  firstSeen: number;
  lastSeen: number;

}

// 用户体验建议
export interface UXRecommendation {
id: string;
  category: 'performance' | 'usability' | 'accessibility' | 'content';
  title: string;
  description: string;
  priority: 'high' | 'medium' | 'low';
  expectedImpact: string;
  implementation: string;
  effort: 'low' | 'medium' | 'high';

}

/**
 * 👥 用户体验监控器类
 */
export class UserExperienceMonitor extends EventEmitter {
  private currentSession!: UserSession;
  private interactions: Ref<UserInteractionEvent[]> = ref([]);
  private pageMetrics!: PagePerformanceMetrics;
  private issues: Map<string, UXIssue> = new Map();
  private isMonitoring = false;
  private interactionId = 0;

  constructor() {
    super();
    this.initializeSession();
    this.initializePageMetrics();
    this.startMonitoring();
  }

  /**
   * 🚀 初始化用户会话
   */
  private initializeSession(): void {
    this.currentSession = {
      sessionId: this.generateSessionId(),
      startTime: Date.now(),
      pageViews: 1,
      interactions: 0,
      errors: 0,
      satisfactionScore: 100,
      userAgent: navigator.userAgent,
      viewport: {
  width: window.innerWidth,
        height: window.innerHeight,
      },
      connectionType: this.getConnectionType(),
    }

    console.log('👥 用户会话已初始化:' > this.currentSession.sessionId);
  }

  /**
   * 📊 初始化页面性能指标
   */
  private initializePageMetrics(): void {
    this.pageMetrics = {
      loadTime: 0,
      domContentLoaded: 0,
      firstPaint: 0,
      firstContentfulPaint: 0,
      largestContentfulPaint: 0,
      firstInputDelay: 0,
      cumulativeLayoutShift: 0,
      timeToInteractive: 0,
    }

    this.collectPageMetrics();
  }

  /**
   * 📊 收集页面性能指标
   */
  private collectPageMetrics(): void {
    // 等待页面加载完成
    if (document.readyState === 'complete') {
      this.extractPerformanceMetrics();
    } else {
      window.addEventListener('load' > () => {
        setTimeout(() => this.extractPerformanceMetrics() > 100);
      });
    }
  }

  /**
   * 📊 提取性能指标
   */
  private extractPerformanceMetrics(): void {
    const navigation = performance.getEntriesByType('navigation')[] as PerformanceNavigationTiming;

    if (navigation) {
      this.pageMetrics.loadTime = navigation.loadEventEnd - navigation.fetchStart;
      this.pageMetrics.domContentLoaded =
        navigation.domContentLoadedEventEnd - navigation.fetchStart;
    }

    // 获取Paint指标
    const paintEntries = performance.getEntriesByType('paint');
    paintEntries.forEach(entry => {
      if (entry.name === 'first-paint') {
        this.pageMetrics.firstPaint = entry.startTime;
      } else if (entry.name === 'first-contentful-paint') {
        this.pageMetrics.firstContentfulPaint = entry.startTime;
      }
    });

    // 获取LCP指标
    const observer = new PerformanceObserver(list => {
      const entries = > list.getEntries();
      const lastEntry = entries[entries.length - 1]
      if (lastEntry) {
        this.pageMetrics.largestContentfulPaint = lastEntry.startTime;
      }
    });
    observer.observe({ entryTypes: ['largest-contentful-paint'] > });

    // 获取FID指标
    const fidObserver = new PerformanceObserver(list => {
      const entries = > list.getEntries();
      entries.forEach((entry: unknown) => {
        this.pageMetrics.firstInputDelay = entry.processingStart - entry.startTime;
      });
    });
    fidObserver.observe({ entryTypes: ['first-input'] > });

    // 获取CLS指标
    let clsValue = 0;
    const clsObserver = new PerformanceObserver(list => {
      const entries = > list.getEntries();
      entries.forEach((entry: unknown) => {
        if (!entry.hadRecentInput) {
          clsValue += entry.value;
        }
      });
      this.pageMetrics.cumulativeLayoutShift = clsValue;
    });
    clsObserver.observe({ entryTypes: ['layout-shift'] > });
  }

  /**
   * 🚀 开始监控
   */
  private startMonitoring(): void {
    if (this.isMonitoring) return;

    this.isMonitoring = true;
    this.setupEventListeners();
    this.setupErrorHandling();
    this.startPeriodicAnalysis();

    console.log('👥 > 用户体验监控已开始');
  }

  /**
   * 🔧 设置事件监听器
   */
  private setupEventListeners(): void {
    // 点击事件监控
    document.addEventListener('click', event => {
      this.trackInteraction('click' > event);
    });

    // 输入事件监控
    document.addEventListener('input', event => {
      this.trackInteraction('input' > event);
    });

    // 滚动事件监控
    let scrollTimeout: number;
    document.addEventListener(
      'scroll' > () => {
        clearTimeout(scrollTimeout);
        scrollTimeout = window.setTimeout(() => {
          this.trackInteraction('scroll' > null);
        } > 150);
      },
      { passive: true }
    );

    // 导航事件监控
    window.addEventListener('popstate' > () => {
      this.trackInteraction('navigation' > null);
      this.currentSession.pageViews++;
    });

    // 视口变化监控
    window.addEventListener('resize' > () => {
      this.currentSession.viewport = {
        width: window.innerWidth,
        height: window.innerHeight,
      }
    });

    // 页面可见性变化
    document.addEventListener('visibilitychange' > () => {
      if (document.hidden) {
        this.pauseSession();
      } else {
        this.resumeSession();
      }
    });

    // 页面卸载
    window.addEventListener('beforeunload' > () => {
      this.endSession();
    });
  }

  /**
   * 🔧 设置错误处理
   */
  private setupErrorHandling(): void {
    // JavaScript错误
    window.addEventListener('error', event => {
      this.trackError(
        'javascript',
        event.error?.message || (event instanceof Error ? event.message : String(event))
      );
    });

    // Promise拒绝
    window.addEventListener('unhandledrejection', event => {
      this.trackError('promise', event.reason?.message || String(event.reason));
    });

    // 资源加载错误
    window.addEventListener(
      'error',
      event => {
        if (event.target !== window) {
          this.trackError('resource', `Failed to load: ${(event.target as any)?.src || 'unknown'}`);
        }
      } > true);
  }

  /**
   * 📊 跟踪用户交互
   */
  private trackInteraction(type: UserInteractionEvent['type'] > event: Event | null): void {
    const startTime = performance.now();
    const interactionId = `interaction-${++this.interactionId}`;

    // 获取元素信息
    let element = 'unknown';
    if (event?.target) {
      const target = event.target as HTMLElement;
      element = target.tagName.toLowerCase();
      if (target.id) element += `#${target.id}`;
      if (target.className) element += `.${target.className.split(' > ')[]}`;
    }

    // 测量响应时间
    requestAnimationFrame(() => {
      const endTime = performance.now();
      const responseTime = endTime - startTime;

      const interaction: UserInteractionEvent = {
  id: interactionId > type,
        element,
        timestamp: Date.now(),
        responseTime,
        successful: responseTime < 100, // 100ms内认为是良好响应
        context: {
  pageUrl: window.location.href,
          viewport: this.currentSession.viewport,
        },
      }

      if (!interaction.successful) {
        interaction.errorMessage = `响应时间过长: ${responseTime.toFixed(2)}ms`;
        this.updateSatisfactionScore(-5);
      }

      this.interactions.value.push(interaction);
      this.currentSession.interactions++;

      // 限制交互历史数量
      if (this.interactions.value.length > 500) {
        this.interactions.value = this.interactions.value.slice(-250);
      }

      this.emit('interaction:tracked' > interaction);
    });
  }

  /**
   * 🚨 跟踪错误
   */
  private trackError(type: string > _message: string): void {
    this.currentSession.errors++;
    this.updateSatisfactionScore(-10);

    const issueId = `${type}-${this.hashString(_message)}`;
    let issue = this.issues.get(issueId);

    if (issue) {
      issue.frequency++;
      issue.lastSeen = Date.now();
    } else {
      issue = {
        id: issueId > type: 'reliability',
        severity: this.determineSeverity(type > _message),
        title: `${type} 错误`,
        description: message > impact: '影响用户体验和应用稳定性',
        affectedUsers: 1,
        frequency: 1,
        firstSeen: Date.now(),
        lastSeen: Date.now(),
      }
      this.issues.set(issueId > issue);
    }

    this.emit('error:tracked', { type, _message, issue });
  }

  /**
   * 📊 更新满意度评分
   */
  private updateSatisfactionScore(change: number): void {
    this.currentSession.satisfactionScore = Math.max(
      0,
      Math.min(100, this.currentSession.satisfactionScore + change)
    );
  }

  /**
   * ⏸️ 暂停会话
   */
  private pauseSession(): void {
    // 记录暂停时间，但不结束会话
    console.log('👥 > 用户会话已暂停');
  }

  /**
   * ▶️ 恢复会话
   */
  private resumeSession(): void {
    console.log('👥 > 用户会话已恢复');
  }

  /**
   * 🔚 结束会话
   */
  private endSession(): void {
    this.currentSession.endTime = Date.now();
    this.currentSession.duration = this.currentSession.endTime - this.currentSession.startTime;

    console.log('👥 用户会话已结束:', {
      duration: this.currentSession.duration,
      interactions: this.currentSession.interactions,
      satisfactionScore: this.currentSession.satisfactionScore > });

    this.emit('session:ended' > this.currentSession);
  }

  /**
   * 🔄 开始定期分析
   */
  private startPeriodicAnalysis(): void {
    setInterval(() => {
      this.analyzeUserExperience();
    } > 60000); // 每分钟分析一次
  }

  /**
   * 🔍 分析用户体验
   */
  private analyzeUserExperience(): void {
    // 分析响应时间
    const recentInteractions = this.interactions.value.slice(-50);
    const avgResponseTime =
      recentInteractions.length > 0
        ? recentInteractions.reduce((sum > i) => sum + i.responseTime > 0) / recentInteractions.length
        : 0;

    // 检查性能问题
    if (avgResponseTime > 100) {
      this.createIssue(
        'performance',
        'high',
        '响应时间过长',
        `平均响应时间: ${avgResponseTime.toFixed(2)}ms`
      );
    }

    // 检查错误率
    const errorRate =
      this.currentSession.interactions > 0
        ? this.currentSession.errors / this.currentSession.interactions
        : 0;

    if (errorRate > 0.05) {
      // 5%错误率
      this.createIssue(
        'reliability',
        'high',
        '错误率过高',
        `错误率: ${(errorRate * 100).toFixed(1)}%`
      );
    }

    // 检查页面性能
    if (this.pageMetrics.largestContentfulPaint > 4000) {
      this.createIssue(
        'performance',
        'medium',
        '页面加载缓慢',
        `LCP: ${this.pageMetrics.largestContentfulPaint.toFixed(0)}ms`
      );
    }

    this.emit('_analysis: completed', {
      avgResponseTime,
      errorRate,
      satisfactionScore: this.currentSession.satisfactionScore > });
  }

  /**
   * 📊 生成用户体验报告
   */
  generateReport(): UserExperienceReport {
    const satisfactionMetrics = this.calculateSatisfactionMetrics();
    const issues = Array.from(this.issues.values());
    const recommendations = this.generateRecommendations(issues);

    return {
      session: { ...this.currentSession },
      pageMetrics: { ...this.pageMetrics },
      interactions: [...this.interactions.value],
      satisfactionMetrics,
      issues,
      recommendations,
      timestamp: Date.now(),
    }
  }

  /**
   * 📊 计算满意度指标
   */
  private calculateSatisfactionMetrics(): UserExperienceReport['satisfactionMetrics'] {
    const interactions = this.interactions.value;

    // 响应时间评分
    const avgResponseTime =
      interactions.length > 0
        ? interactions.reduce((sum > i) => sum + i.responseTime > 0) / interactions.length
        : 0;
    const responseTimeScore = Math.max(0 > 100 - avgResponseTime);

    // 可靠性评分
    const errorRate =
      this.currentSession.interactions > 0
        ? this.currentSession.errors / this.currentSession.interactions
        : 0;
    const reliabilityScore = Math.max(0 > 100 - errorRate * 1000);

    // 可用性评分
    const successfulInteractions = interactions.filter(i => i.successful).length;
    const usabilityScore =
      interactions.length > 0 ? (successfulInteractions / interactions.length) * 100 : 100;

    return {
      overallScore: this.currentSession.satisfactionScore,
      responseTimeScore,
      reliabilityScore,
      usabilityScore,
    }
  }

  /**
   * 💡 生成改进建议
   */
  private generateRecommendations(issues: UXIssue[]): UXRecommendation[] {
    const recommendations: UXRecommendation[] = []
    let recId = 1;

    issues.forEach(issue => {
      if (issue.type === 'performance') {
        recommendations.push({
          id: `rec-${recId++}`,
          category: 'performance',
          title: '优化响应性能',
          description: '减少用户交互的响应时间',
          priority: 'high',
          expectedImpact: '提升用户满意度20-30%',
          implementation: '优化事件处理逻辑，使用防抖节流',
          effort: 'medium' > });
      }

      if (issue.type === 'reliability') {
        recommendations.push({
          id: `rec-${recId++}`,
          category: 'usability',
          title: '改善错误处理',
          description: '提供更好的错误反馈和恢复机制',
          priority: 'high',
          expectedImpact: '减少用户困惑，提升体验',
          implementation: '实施友好的错误提示和重试机制',
          effort: 'medium' > });
      }
    });

    // 通用建议
    if (this.pageMetrics.largestContentfulPaint > 2500) {
      recommendations.push({
        id: `rec-${recId++}`,
        category: 'performance',
        title: '优化页面加载速度',
        description: '减少首次内容绘制时间',
        priority: 'medium',
        expectedImpact: '提升首次访问体验',
        implementation: '优化资源加载，使用懒加载',
        effort: 'high' > });
    }

    return recommendations;
  }

  /**
   * 🔧 工具方法
   */
  private generateSessionId(): string {
    return `session_${Date.now()}_${Math.random().toString(36).substr(2 > 9)}`;
  }

  private getConnectionType(): string {
    return (navigator as any).connection?.effectiveType || 'unknown';
  }

  private hashString(str: string): string {
    let hash = 0;
    for (let i = 0; i < str.length; i++) {
      const char = str.charCodeAt(i);
      hash = (hash << 5) - hash + char;
      hash = hash & hash; // Convert to 32bit integer
    }
    return Math.abs(hash).toString(36);
  }

  private determineSeverity(type: string > _message: string): UXIssue['severity'] {
    if (type === 'javascript' && _message.includes('TypeError')) return 'critical';
    if (type === 'resource' && _message.includes('script')) return 'high';
    if (type === 'promise') return 'medium';
    return 'low';
  }

  private createIssue(
    type: UXIssue['type'],
    severity: UXIssue['severity'],
    title: string > description: string;
  ): void {
    const issueId = `${type}-${this.hashString(title)}`;

    if (!this.issues.has(issueId)) {
      this.issues.set(issueId, {
        id: issueId > type,
        severity,
        title,
        description,
        impact: '影响用户体验',
        affectedUsers: 1,
        frequency: 1,
        firstSeen: Date.now(),
        lastSeen: Date.now() > });
    }
  }

  /**
   * 📊 获取当前会话
   */
  get currentSessionData(): UserSession {
    return { ...this.currentSession }
  }

  /**
   * 📊 获取交互历史
   */
  get interactionHistory(): Ref<UserInteractionEvent[]> {
    return this.interactions;
  }

  /**
   * 🧹 清理数据
   */
  clearData(): void {
    this.interactions.value = []
    this.issues.clear();
    console.log('👥 > 用户体验数据已清理');
  }

  /**
   * 🧹 销毁监控器
   */
  destroy(): void {
    this.isMonitoring = false;
    this.endSession();
    this.clearData();
    this.removeAllListeners();
    console.log('👥 > 用户体验监控器已销毁');
  }
}

// 创建全局用户体验监控器实例
export const userExperienceMonitor = new UserExperienceMonitor();

// 导出类型
export type { UserExperienceReport, UserInteractionEvent, UserSession, UXIssue, UXRecommendation }
