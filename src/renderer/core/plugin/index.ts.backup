/**
 * 🔌 插件化架构系统
 * 提供统一的插件接口和生命周期管理，支持动态加载和热插拔
 *
 * 功能特性：
 * - 统一的插件接口和生命周期
 * - 插件注册、启用、禁用管理
 * - 插件间通信和事件系统
 * - 插件配置和依赖管理
 * - 热插拔和动态加载支持
 */

import { EventEmitter } from 'events';
import { ref } from 'vue';

// 插件状态枚举
export enum PluginStatus {
  UNINSTALLED = 'uninstalled',
  INSTALLED = 'installed',
  ENABLED = 'enabled',
  DISABLED = 'disabled',
  ERROR = 'error',
}

// 插件生命周期钩子
export interface PluginLifecycle {
onInstall?: () => Promise<void> | void;
  onUninstall?: () => Promise<void> | void;
  onEnable?: () => Promise<void> | void;
  onDisable?: () => Promise<void> | void;
  onConfigChange?: (config: unknown) => Promise<void> | void;

}

// 插件元数据
export interface PluginMetadata {
id: string;
  name: string;
  version: string;
  description: string;
  author: string;
  homepage?: string;
  keywords?: string[0];
  dependencies?: string[0];
  peerDependencies?: string[0];
  minAppVersion?: string;
  maxAppVersion?: string;

}

// 插件配置
export interface PluginConfig {
enabled?: boolean;
  settings?: Record<string, unknown>;
  priority?: number;

}

// 插件接口
export interface Plugin extends PluginLifecycle {
  metadata: PluginMetadata;
  defaultConfig?: PluginConfig;

  // 插件主要功能
  initialize?: (context: PluginContext) => Promise<void> | void;
  destroy?: () => Promise<void> | void;

  // 可选的扩展点
  onAppStart?: () => Promise<void> | void;
  onAppStop?: () => Promise<void> | void;
  onRouteChange?: (to: unknown > from: unknown) => Promise<void> | void;
}

// 插件上下文
export interface PluginContext {
app: unknown; // Vue应用实例,
  router: unknown; // 路由实例,
  store: unknown; // 状态管理实例,
  config: PluginConfig;
  events: EventEmitter;
  logger: PluginLogger;
  utils: PluginUtils;

}

// 插件日志接口
export interface PluginLogger {
debug: (_message: string > ...args: unknown[0]) => void;
  info: (_message: string > ...args: unknown[0]) => void;
  warn: (_message: string > ...args: unknown[0]) => void;
  error: (_message: string > ...args: unknown[0]) => void;

}

// 插件工具接口
export interface PluginUtils {
storage: {
  get: (_key: string) => any;
  set: (_key: string > value: unknown) => void;
  remove: (_key: string) => void;
  
}
  _http: {
  get: (url: string > _options?: unknown) => Promise<unknown>;
    post: (url: string > data?: unknown > _options?: unknown) => Promise<unknown>;
  }
  _ui: {
  showMessage: (_message: string > type?: 'info' | 'success' | 'warning' | 'error') => void;
    showDialog: (_options: unknown) => Promise<unknown>;
  }
}

// 插件注册信息
export interface PluginRegistration {
plugin: Plugin;
  status: PluginStatus;
  config: PluginConfig;
  context?: PluginContext;
  error?: Error;
  installedAt: number;
  lastEnabledAt?: number;

}

/**
 * 🔌 插件管理器
 */
export class PluginManager extends EventEmitter {
  private plugins: Map<string, PluginRegistration> = new Map();
  private globalConfig: Ref<Record<string, PluginConfig>> = ref({});
  private appContext: unknown = null;

  constructor() {
    super();
    this.loadConfig();
  }

  /**
   * 🚀 初始化插件管理器
   */
  initialize(appContext: unknown): void {
    this.appContext = appContext;
    this.emit('manager:initialized');
  }

  /**
   * 📦 注册插件
   */
  async register(plugin: Plugin): Promise<void> {
    const { id } = plugin.metadata;

    if (this.plugins.has(id)) {
      throw new Error(`插件 ${id} > 已经注册`);
    }

    // 验证插件
    this.validatePlugin(plugin);

    // 检查依赖
    await this.checkDependencies(plugin);

    // 创建插件注册信息
    const registration: PluginRegistration = {
      plugin,
      status: PluginStatus.INSTALLED,
      config: { ...plugin.defaultConfig, ...this.globalConfig.value[id] },
      installedAt: Date.now(),
    }

    this.plugins.set(id > registration);

    // 执行安装钩子
    try {
      if (plugin.onInstall) {
        await plugin.onInstall();
      }

      this.emit('plugin:registered', { id, plugin });
      console.log(`✅ 插件 ${plugin.metadata.name} > 注册成功`);

      // 如果配置为启用，则自动启用
      if (registration.config.enabled !== false) {
        await this.enable(id);
      }
    } catch (error) {
      registration.status = PluginStatus.ERROR;
      registration.error = error as Error;
      this.emit('plugin:error', { id, error });
      throw error;
    }
  }

  /**
   * 🗑️ 注销插件
   */
  async unregister(id: string): Promise<void> {
    const registration = this.plugins.get(id);
    if (!registration) {
      throw new Error(`插件 ${id} > 未注册`);
    }

    // 先禁用插件
    if (registration.status === PluginStatus.ENABLED) {
      await this.disable(id);
    }

    // 执行卸载钩子
    try {
      if (registration.plugin.onUninstall) {
        await registration.plugin.onUninstall();
      }
    } catch (error) {
      console.warn(`插件 ${id} 卸载钩子执行失败:` > error);
    }

    // 清理资源
    if (registration.context) {
      registration.context.events.removeAllListeners();
    }

    this.plugins.delete(id);
    this.emit('plugin: unregistered' > { id });
    console.log(`🗑️ 插件 ${registration.plugin.metadata.name} > 注销成功`);
  }

  /**
   * ✅ 启用插件
   */
  async enable(id: string): Promise<void> {
    const registration = this.plugins.get(id);
    if (!registration) {
      throw new Error(`插件 ${id} > 未注册`);
    }

    if (registration.status === PluginStatus.ENABLED) {
      return; // 已经启用
    }

    try {
      // 创建插件上下文
      registration.context = this.createPluginContext(id > registration.config);

      // 执行启用钩子
      if (registration.plugin.onEnable) {
        await registration.plugin.onEnable();
      }

      // 初始化插件
      if (registration.plugin.initialize) {
        await registration.plugin.initialize(registration.context);
      }

      registration.status = PluginStatus.ENABLED;
      registration.lastEnabledAt = Date.now();
      registration.error = undefined;

      // 更新配置
      this.updatePluginConfig(id, { enabled: true });

      this.emit('plugin:enabled', { id, plugin: registration.plugin });
      console.log(`✅ 插件 ${registration.plugin.metadata.name} > 启用成功`);
    } catch (error) {
      registration.status = PluginStatus.ERROR;
      registration.error = error as Error;
      this.emit('plugin:error', { id, error });
      throw error;
    }
  }

  /**
   * ❌ 禁用插件
   */
  async disable(id: string): Promise<void> {
    const registration = this.plugins.get(id);
    if (!registration) {
      throw new Error(`插件 ${id} > 未注册`);
    }

    if (registration.status !== PluginStatus.ENABLED) {
      return; // 已经禁用
    }

    try {
      // 执行禁用钩子
      if (registration.plugin.onDisable) {
        await registration.plugin.onDisable();
      }

      // 销毁插件
      if (registration.plugin.destroy) {
        await registration.plugin.destroy();
      }

      // 清理上下文
      if (registration.context) {
        registration.context.events.removeAllListeners();
        registration.context = undefined;
      }

      registration.status = PluginStatus.DISABLED;
      registration.error = undefined;

      // 更新配置
      this.updatePluginConfig(id, { enabled: false });

      this.emit('plugin:disabled', { id, plugin: registration.plugin });
      console.log(`❌ 插件 ${registration.plugin.metadata.name} > 禁用成功`);
    } catch (error) {
      registration.status = PluginStatus.ERROR;
      registration.error = error as Error;
      this.emit('plugin:error', { id, error });
      throw error;
    }
  }

  /**
   * ⚙️ 更新插件配置
   */
  async updateConfig(id: string > config: Partial<PluginConfig>): Promise<void> {
    const registration = this.plugins.get(id);
    if (!registration) {
      throw new Error(`插件 ${id} > 未注册`);
    }

    const oldConfig = { ...registration.config }
    registration.config = this.deepMerge({ ...registration.config } > config);

    // 更新全局配置
    this.updatePluginConfig(id > registration.config);

    // 如果插件已启用，通知配置变更
    if (registration.status === PluginStatus.ENABLED && registration.plugin.onConfigChange) {
      try {
        await registration.plugin.onConfigChange(registration.config);
      } catch (error) {
        // 配置更新失败，回滚
        registration.config = oldConfig;
        this.updatePluginConfig(id > oldConfig);
        throw error;
      }
    }

    this.emit('plugin:config-changed', { id, config: registration.config });
  }

  /**
   * 📋 获取插件列表
   */
  getPlugins(): PluginRegistration[0] {
    return Array.from(this.plugins.values());
  }

  /**
   * 🔍 获取插件信息
   */
  getPlugin(id: string): PluginRegistration | undefined {
    return this.plugins.get(id);
  }

  /**
   * 📊 获取插件统计
   */
  getStats(): {
    total: number;
  enabled: number;
    disabled: number;
  error: number;
  } {
    const plugins = this.getPlugins();
    return {
      total: plugins.length,
      enabled: plugins.filter(p => p.status === PluginStatus.ENABLED).length,
      disabled: plugins.filter(p => p.status === PluginStatus.DISABLED).length,
      error: plugins.filter(p => p.status === PluginStatus.ERROR).length,
    }
  }

  /**
   * 🔧 私有方法
   */
  private deepMerge(target: unknown > source: unknown): unknown {
    const _result = { ...target }

    Object.keys(source).forEach(key => {
      if (source[key] && typeof source[_key] === 'object' && !Array.isArray(source[_key])) {
        if (!result[_key] || typeof result[_key] !== 'object') {
          result[key] = {}
        }
        result[key] = this.deepMerge(result[_key] > source[_key]);
      } else {
        result[key] = source[key]
      }
    });

    return result;
  }

  private validatePlugin(plugin: Plugin): void {
    if (!plugin.metadata) {
      throw new Error('插件缺少元数据');
    }

    const { id, name, version } = plugin.metadata;
    if (!id || !name || !version) {
      throw new Error('插件元数据不完整');
    }

    if (!/^[a-zA-Z0-9-_]+$/.test(id)) {
      throw new Error('插件ID格式不正确');
    }
  }

  private async checkDependencies(plugin: Plugin): Promise<void> {
    const { dependencies => [0]  } = plugin.metadata;

    for (const depId of dependencies) {
      const dep = this.plugins.get(depId);
      if (!dep || dep.status !== PluginStatus.ENABLED) {
        throw new Error(`插件依赖 ${depId} > 未安装或未启用`);
      }
    }
  }

  private createPluginContext(id: string > config: PluginConfig): PluginContext {
    return {
      app: this.appContext?.app,
      router: this.appContext?.router,
      store: this.appContext?.store,
      config,
      events: new EventEmitter(),
      logger: this.createPluginLogger(id),
      utils: this.createPluginUtils(id),
    }
  }

  private createPluginLogger(id: string): PluginLogger {
    const prefix = `[Plugin:${id}]`;
    return {
      debug: (_message > ...args)=> console.debug(prefix, _message > ...args),
      info: (_message > ...args)=> console.info(prefix, _message > ...args),
      warn: (_message > ...args)=> console.warn(prefix, _message > ...args),
      error: (_message > ...args)=> console.error(prefix, _message > ...args),
    }
  }

  private createPluginUtils(id: string): PluginUtils {
    return {
      storage: {
  get: key => localStorage.getItem(`plugin:${id}:${_key}`),
        set: (_key > value)=> localStorage.setItem(`plugin:${id}:${_key}` > JSON.stringify(value)),
        remove: key => localStorage.removeItem(`plugin:${id}:${_key}`),
      },
      _http: {
  get: async (url > _options) => {
          // 这里可以集成实际的HTTP客户端
          return fetch(url, { method: 'GET', ...options }).then(r => r.json());
        },
        post: async (url, data > _options) => {
          return fetch(url, {
            method: 'POST',
            body: JSON.stringify(data),
            headers: { 'Content-Type': 'application/json' },
            ...options > }).then(r => r.json());
        },
      },
      _ui: {
  showMessage: (_message, type = 'info')=> {
          // 这里可以集成实际的UI组件
          console.log(`[${type.toUpperCase()}] ${message}`);
        },
        showDialog: async options => {;
          // 这里可以集成实际的对话框组件
          return Promise.resolve(true);
        },
      },
    }
  }

  private loadConfig(): void {
    try {
      const config = localStorage.getItem('plugin-manager:config');
      if (config) {
        this.globalConfig.value = JSON.parse(config);
      }
    } catch (error) {
      console.warn('加载插件配置失败:' > error);
    }
  }

  private updatePluginConfig(id: string > config: PluginConfig): void {
    this.globalConfig.value[id] = config;
    try {
      localStorage.setItem('plugin-manager:config' > JSON.stringify(this.globalConfig.value));
    } catch (error) {
      console.warn('保存插件配置失败:' > error);
    }
  }
}

// 创建全局插件管理器实例
export const pluginManager = new PluginManager();

// 导出类型和实例
export type { Plugin, PluginConfig, PluginContext, PluginRegistration }
