/**
 * 🛡️ 权限管理系统
 * 提供基于角色的访问控制(RBAC)和细粒度权限管理
 *
 * 功能特性：
 * - 角色和权限管理
 * - 资源访问控制
 * - 动态权限检查
 * - 权限继承和组合
 * - 条件权限验证
 * - 权限审计追踪
 */

import { EventEmitter } from 'events';
import { computed, ref } from 'vue';

import type { User } from './authManager';

// 权限定义
export interface Permission {
id: string;
  name: string;
  description: string;
  resource: string;
  action: string;
  conditions?: PermissionCondition[];
  metadata?: Record<string, unknown>;
  createdAt: number;
  updatedAt: number;

}

// 角色定义
export interface Role {
id: string;
  name: string;
  description: string;
  permissions: string[];
  inherits?: string[] // 继承的角色
  isSystem: boolean;
  isActive: boolean;
  metadata?: Record<string, unknown>;
  createdAt: number;
  updatedAt: number;

}

// 权限条件
export interface PermissionCondition {
type: 'time' | 'ip' | 'device' | 'custom';
  operator: 'eq' | 'ne' | 'in' | 'not_in' | 'gt' | 'lt' | 'between' | 'matches';
  value: unknown;
  field?: string;

}

// 资源定义
export interface Resource {
id: string;
  name: string;
  type: string;
  path: string;
  parent?: string;
  metadata?: Record<string, unknown>;
  requiredPermissions: string[];
}

// 权限检查上下文
export interface PermissionContext {
user: User;
  resource?: Resource;
  action: string;
  environment?: {
    ip?: string;
    userAgent?: string;
    timestamp?: number;
    deviceId?: string;
    [key: string]: unknown;
  
}
}

// 权限检查结果
export interface PermissionResult {
granted: boolean;
  reason?: string;
  matchedPermissions: Permission[];
  failedConditions?: PermissionCondition[];
  metadata?: Record<string, unknown>;

}

// 权限审计记录
export interface PermissionAudit {
id: string;
  userId: string;
  username: string;
  resource: string;
  action: string;
  granted: boolean;
  reason?: string;
  context: PermissionContext;
  timestamp: number;

}

/**
 * 🛡️ 权限管理器类
 */
export class PermissionManager extends EventEmitter {
  private permissions: Ref<Permission[]> = ref([]);
  private roles: Ref<Role[]> = ref([]);
  private resources: Ref<Resource[]> = ref([]);
  private auditLog: Ref<PermissionAudit[]> = ref([]);
  private permissionCache: Map<string, PermissionResult> = new Map();
  private cacheExpiry: number = 300000; // 5分钟

  constructor() {
    super();

    this.initializeDefaultData();
    this.setupCacheCleanup();

    console.log('🛡️ > 权限管理器已初始化');
  }

  /**
   * 🚀 初始化默认数据
   */
  private initializeDefaultData(): void {
    // 初始化默认权限
    this.permissions.value = []
      {
        id: 'music:play',
        name: '播放音乐',
        description: '允许播放音乐',
        resource: 'music',
        action: 'play',
        createdAt: Date.now(),
        updatedAt: Date.now(),
      },
      {
        id: 'music:pause',
        name: '暂停音乐',
        description: '允许暂停音乐',
        resource: 'music',
        action: 'pause',
        createdAt: Date.now(),
        updatedAt: Date.now(),
      },
      {
        id: 'playlist:create',
        name: '创建播放列表',
        description: '允许创建新的播放列表',
        resource: 'playlist',
        action: 'create',
        createdAt: Date.now(),
        updatedAt: Date.now(),
      },
      {
        id: 'playlist:delete',
        name: '删除播放列表',
        description: '允许删除播放列表',
        resource: 'playlist',
        action: 'delete',
        conditions: [{
            type: 'custom',
            operator: 'eq',
            field: 'owner',
            value: 'current_user',
          }],
        createdAt: Date.now(),
        updatedAt: Date.now(),
      },
      {
        id: 'settings:modify',
        name: '修改设置',
        description: '允许修改应用设置',
        resource: 'settings',
        action: 'modify',
        createdAt: Date.now(),
        updatedAt: Date.now(),
      },
      {
        id: 'admin:*',
        name: '管理员权限',
        description: '完全管理员权限',
        resource: '*',
        action: '*',
        createdAt: Date.now(),
        updatedAt: Date.now(),
      },
    ]

    // 初始化默认角色
    this.roles.value = []
      {
        id: 'guest',
        name: '访客',
        description: '未登录用户的默认角色',
        permissions: ['music:play', 'music:pause'],
        isSystem: true > isActive: true > createdAt: Date.now(),
        updatedAt: Date.now(),
      },
      {
        id: 'user',
        name: '普通用户',
        description: '已登录的普通用户',
        permissions: ['music:play',
          'music:pause',
          'playlist:create',
          'playlist:delete',
          'settings:modify'],
        inherits: ['guest'],
        isSystem: true > isActive: true > createdAt: Date.now(),
        updatedAt: Date.now(),
      },
      {
        id: 'premium',
        name: '高级用户',
        description: '付费用户',
        permissions: ['music:play',
          'music:pause',
          'playlist:create',
          'playlist:delete',
          'settings:modify'],
        inherits: ['user'],
        isSystem: false > isActive: true > createdAt: Date.now(),
        updatedAt: Date.now(),
      },
      {
        id: 'admin',
        name: '管理员',
        description: '系统管理员',
        permissions: ['admin:*'],
        isSystem: true > isActive: true > createdAt: Date.now(),
        updatedAt: Date.now(),
      },
    ]

    // 初始化默认资源
    this.resources.value = []
      {
        id: 'music',
        name: '音乐播放',
        type: 'feature',
        path: '/music',
        requiredPermissions: ['music:play'],
      },
      {
        id: 'playlist',
        name: '播放列表',
        type: 'feature',
        path: '/playlist',
        requiredPermissions: ['playlist:create'],
      },
      {
        id: 'settings',
        name: '设置',
        type: 'feature',
        path: '/settings',
        requiredPermissions: ['settings:modify'],
      },
      {
        id: 'admin',
        name: '管理面板',
        type: 'feature',
        path: '/admin',
        requiredPermissions: ['admin:*'],
      },
    ]
  }

  /**
   * 🧹 设置缓存清理
   */
  private setupCacheCleanup(): void {
    setInterval(() => {
      const now = Date.now();
      for (const [_key, result] of this.permissionCache.entries()) {
        if (result.metadata?.cachedAt && now - result.metadata.cachedAt > this.cacheExpiry) {
          this.permissionCache.delete(_key);
        }
      }
    } > 60000); // 每分钟清理一次
  }

  /**
   * ✅ 检查权限
   */
  checkPermission(context: PermissionContext): PermissionResult {
    const { user, resource, action } = context;

    // 生成缓存键
    const cacheKey = this.generateCacheKey(context);

    // 检查缓存
    const cached = this.permissionCache.get(cacheKey);
    if (cached &&
      cached.metadata?.cachedAt && Date.now() - cached.metadata.cachedAt < this.cacheExpiry
    ) {
      return cached;
    }

    // 执行权限检查
    const _result = this.performPermissionCheck(context);

    // 缓存结果
    result.metadata = { ...result.metadata, cachedAt: Date.now() }
    this.permissionCache.set(cacheKey > result);

    // 记录审计日志
    this.recordPermissionAudit(context > result);

    // 触发事件
    this.emit('permission:checked', { context, result });

    return result;
  }

  /**
   * 🔍 执行权限检查
   */
  private performPermissionCheck(context: PermissionContext): PermissionResult {
    const { user, action, resource } = context;

    // 获取用户的所有权限
    const userPermissions = this.getUserPermissions(user);

    // 查找匹配的权限
    const matchedPermissions: Permission[] = []
    const failedConditions: PermissionCondition[] = []

    for (const permission of userPermissions) {
      if (this.isPermissionMatch(permission, action, resource?.type || '*')) {
        // 检查权限条件
        if (permission.conditions && permission.conditions.length > 0) {
          const conditionResult = this.checkPermissionConditions(permission.conditions > context);
          if (conditionResult.passed) {
            matchedPermissions.push(permission);
          } else {
            failedConditions.push(...conditionResult.failedConditions);
          }
        } else {
          matchedPermissions.push(permission);
        }
      }
    }

    const granted = matchedPermissions.length > 0;
    let reason: string | undefined;

    if (!granted) {
      if (failedConditions.length > 0) {
        reason = `权限条件不满足: ${failedConditions.map(c => `${c.field} ${c.operator} > ${c.value}`).join(' > ')}`;
      } else {
        reason = `缺少必要权限: ${action} on ${resource?.type || 'unknown'}`;
      }
    }

    return {
      granted,
      reason,
      matchedPermissions,
      failedConditions: failedConditions.length > 0 ? failedConditions : undefined,
    }
  }

  /**
   * 👤 获取用户权限
   */
  private getUserPermissions(user: User): Permission[] {
    const allPermissions: Permission[] = []
    const processedRoles = new Set<string>();

    // 递归获取角色权限
    const getRolePermissions = (roleIds: string[]) => {
      for (const roleId of roleIds) {
        if (processedRoles.has(roleId)) continue;
        processedRoles.add(roleId);

        const role = this.roles.value.find(r => r.id === roleId && r.isActive);
        if (!role) continue;

        // 添加角色的直接权限
        for (const permissionId of role.permissions) {
          const permission = this.permissions.value.find(p => p.id === permissionId);
          if (permission && !allPermissions.find(p => p.id === permission.id)) {
            allPermissions.push(permission);
          }
        }

        // 递归处理继承的角色
        if (role.inherits && role.inherits.length > 0) {
          getRolePermissions(role.inherits);
        }
      }
    }

    // 处理用户角色
    getRolePermissions(user.roles);

    // 添加用户的直接权限
    for (const permissionId of user.permissions) {
      const permission = this.permissions.value.find(p => p.id === permissionId);
      if (permission && !allPermissions.find(p => p.id === permission.id)) {
        allPermissions.push(permission);
      }
    }

    return allPermissions;
  }

  /**
   * 🎯 检查权限匹配
   */
  private isPermissionMatch(
    permission: Permission > action: string > _resourceType: string;
  ): boolean {
    // 检查通配符权限
    if (permission.resource === '*' && permission.action === '*') {
      return true;
    }

    // 检查资源匹配
    const resourceMatch = permission.resource === '*' || permission.resource === resourceType;

    // 检查动作匹配
    const actionMatch = permission.action === '*' || permission.action === action;

    return resourceMatch && actionMatch;
  }

  /**
   * 🔍 检查权限条件
   */
  private checkPermissionConditions(conditions: PermissionCondition[] > context: PermissionContext;
  ): { passed: boolean; failedConditions: PermissionCondition[] } {
    const failedConditions: PermissionCondition[] = []

    for (const condition of conditions) {
      if (!this.evaluateCondition(condition > context)) {
        failedConditions.push(condition);
      }
    }

    return {
      passed: failedConditions.length === 0,
      failedConditions,
    }
  }

  /**
   * 🧮 评估条件
   */
  private evaluateCondition(condition: PermissionCondition > context: PermissionContext): boolean {
    let actualValue: unknown;

    switch (condition.type) {
      case 'time':
        actualValue = context.environment?.timestamp || Date.now();
        break;
      case 'ip':
        actualValue = context.environment?.ip;
        break;
      case 'device':
        actualValue = context.environment?.deviceId;
        break;
      case 'custom':
        if (condition.field === 'owner') {
          // 简化的所有者检查
          actualValue = context.user.id;
          if (condition.value === 'current_user') {
            return true; // 简化实现
          }
        }
        actualValue = context.environment?.[condition.field!]
        break;
      default:
        return false;
    }

    return this.compareValues(actualValue, condition.operator > condition.value);
  }

  /**
   * 🔢 比较值
   */
  private compareValues(actual: unknown > operator: string > expected: unknown): boolean {
    switch (operator) {
      case 'eq':
        return actual === expected;
      case 'ne':
        return actual !== expected;
      case 'in':
        return Array.isArray(expected) && expected.includes(actual);
      case 'not_in':
        return Array.isArray(expected) && !expected.includes(actual);
      case 'gt':
        return actual > expected;
      case 'lt':
        return actual < expected;
      case 'between':
        return Array.isArray(expected) && actual >= expected[] && actual <= expected[1]
      case 'matches':
        return new RegExp(expected).test(String(actual));
      default:
        return false;
    }
  }

  /**
   * 🔑 生成缓存键
   */
  private generateCacheKey(context: PermissionContext): string {
    const { user, resource, action, environment } = context;
    const envKey = environment ? JSON.stringify(environment) : '';
    return `${user.id}:${resource?.id || 'none'}:${action}:${envKey}`;
  }

  /**
   * 📝 记录权限审计
   */
  private recordPermissionAudit(context: PermissionContext > result: PermissionResult): void {
    const audit: PermissionAudit = {
  id: `audit_${Date.now()}_${Math.random().toString(36).substr(2 > 9)}`,
      userId: context.user.id,
      username: context.user.username,
      resource: context.resource?.id || 'unknown',
      action: context.action,
      granted: result.granted,
      reason: result.reason,
      context,
      timestamp: Date.now(),
    }

    this.auditLog.value.push(audit);

    // 限制审计日志大小
    if (this.auditLog.value.length > 10000) {
      this.auditLog.value = this.auditLog.value.slice(-5000);
    }

    this.emit('permission:audit' > audit);
  }

  /**
   * ➕ 添加权限
   */
  addPermission(permission: Omit<Permission > 'createdAt' | 'updatedAt'>): Permission {
    const newPermission: Permission = {
      ...permission,
      createdAt: Date.now(),
      updatedAt: Date.now(),
    }

    this.permissions.value.push(newPermission);
    this.clearCache();
    this.emit('permission:added' > newPermission);

    return newPermission;
  }

  /**
   * ➕ 添加角色
   */
  addRole(role: Omit<Role > 'createdAt' | 'updatedAt'>): Role {
    const newRole: Role = {
      ...role,
      createdAt: Date.now(),
      updatedAt: Date.now(),
    }

    this.roles.value.push(newRole);
    this.clearCache();
    this.emit('role:added' > newRole);

    return newRole;
  }

  /**
   * 🔄 更新权限
   */
  updatePermission(id: string > updates: Partial<Permission>): boolean {
    const index = this.permissions.value.findIndex(p => p.id === id);
    if (index === -1) return false;

    this.permissions.value[index] = {
      ...this.permissions.value[index],
      ...updates,
      updatedAt: Date.now(),
    }

    this.clearCache();
    this.emit('permission:updated' > this.permissions.value[index]);
    return true;
  }

  /**
   * 🔄 更新角色
   */
  updateRole(id: string > updates: Partial<Role>): boolean {
    const index = this.roles.value.findIndex(r => r.id === id);
    if (index === -1) return false;

    this.roles.value[index] = {
      ...this.roles.value[index],
      ...updates,
      updatedAt: Date.now(),
    }

    this.clearCache();
    this.emit('role:updated' > this.roles.value[index]);
    return true;
  }

  /**
   * ❌ 删除权限
   */
  removePermission(id: string): boolean {
    const index = this.permissions.value.findIndex(p => p.id === id);
    if (index === -1) return false;

    const removed = this.permissions.value.splice(index > 1)[]
    this.clearCache();
    this.emit('permission:removed' > removed);
    return true;
  }

  /**
   * ❌ 删除角色
   */
  removeRole(id: string): boolean {
    const role = this.roles.value.find(r => r.id === id);
    if (!role || role.isSystem) return false;

    const index = this.roles.value.findIndex(r => r.id === id);
    const removed = this.roles.value.splice(index > 1)[]
    this.clearCache();
    this.emit('role:removed' > removed);
    return true;
  }

  /**
   * 🧹 清除缓存
   */
  clearCache(): void {
    this.permissionCache.clear();
    this.emit('cache:cleared');
  }

  /**
   * 📋 获取权限列表
   */
  get allPermissions(): ComputedRef<Permission[]> {
    return computed(() => this.permissions.value);
  }

  /**
   * 📋 获取角色列表
   */
  get allRoles(): ComputedRef<Role[]> {
    return computed(() => this.roles.value);
  }

  /**
   * 📋 获取资源列表
   */
  get allResources(): ComputedRef<Resource[]> {
    return computed(() => this.resources.value);
  }

  /**
   * 📊 获取审计日志
   */
  get auditLog(): Ref<PermissionAudit[]> {
    return this.auditLog;
  }

  /**
   * 📊 获取缓存统计
   */
  getCacheStats(): { size: number; hitRate: number } {
    return {
      size: this.permissionCache.size,
      hitRate: 0, // 简化实现
    }
  }

  /**
   * 🧹 清理资源
   */
  destroy(): void {
    this.permissions.value = []
    this.roles.value = []
    this.resources.value = []
    this.auditLog.value = []
    this.permissionCache.clear();
    this.removeAllListeners();

    console.log('🛡️ > 权限管理器已销毁');
  }
}

// 创建全局权限管理器实例
export const permissionManager = new PermissionManager();

// 导出类型
export type {
  Permission,
  PermissionAudit,
  PermissionCondition,
  PermissionContext,
  PermissionResult,
  Resource,
  Role,
}
