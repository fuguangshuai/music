/**
 * üîí Áªü‰∏ÄÁ±ªÂûãÂÆàÂç´Â∑•ÂÖ∑Â∫ì
 * Êï¥ÂêàÈ°πÁõÆ‰∏≠ÊâÄÊúâÈáçÂ§çÁöÑÁ±ªÂûãÊ£ÄÊü•ÂíåÈ™åËØÅÂáΩÊï∞
 *
 * ÂäüËÉΩÁâπÊÄßÔºö
 * - Âü∫Á°ÄÁ±ªÂûãÊ£ÄÊü•Ôºàstring, number, booleanÁ≠âÔºâ
 * - Â§çÂêàÁ±ªÂûãÊ£ÄÊü•Ôºàobject, array, functionÁ≠âÔºâ
 * - APIÂìçÂ∫îÈ™åËØÅ
 * - Èü≥‰πêÊï∞ÊçÆÈ™åËØÅ
 * - ÈÖçÁΩÆÊï∞ÊçÆÈ™åËØÅ
 * - ÊÄßËÉΩ‰ºòÂåñÁöÑÁºìÂ≠òÈ™åËØÅÂô®
 *
 * @author TypeScriptÈáçÊûÑÈ°πÁõÆÁªÑ
 * @since v4.11.0
 */

import type { GenericObject, ValidationInput } from '../types/consolidated-types';

// ============================================================================
// Âü∫Á°ÄÁ±ªÂûãÂÆàÂç´ - Êõø‰ª£È°πÁõÆ‰∏≠ÈáçÂ§çÁöÑÂü∫Á°ÄÁ±ªÂûãÊ£ÄÊü•
// ============================================================================

/**
 * Âü∫Á°ÄÁ±ªÂûãÂÆàÂç´ÈõÜÂêà
 * Êï¥Âêà typeHelpers.ts, consolidated-types.ts Á≠âÊñá‰ª∂‰∏≠ÁöÑÈáçÂ§çÂáΩÊï∞
 */
export const basicTypeGuards = {
  /**
   * Ê£ÄÊü•ÊòØÂê¶‰∏∫Â≠óÁ¨¶‰∏≤
   */
  isString: (value: ValidationInput): value is string => typeof value === 'string',

  /**
   * Ê£ÄÊü•ÊòØÂê¶‰∏∫Êï∞Â≠óÔºàÊéíÈô§NaNÂíåInfinityÔºâ
   */
  isNumber: (value: ValidationInput): value is number =>
    typeof value === 'number' && !Number.isNaN(value) && Number.isFinite(value),

  /**
   * Ê£ÄÊü•ÊòØÂê¶‰∏∫Êï¥Êï∞
   */
  isInteger: (value: ValidationInput): value is number =>
    basicTypeGuards.isNumber(value) && Number.isInteger(value),

  /**
   * Ê£ÄÊü•ÊòØÂê¶‰∏∫Ê≠£Êï∞
   */
  isPositiveNumber: (value: ValidationInput): value is number =>
    basicTypeGuards.isNumber(value) && value > 0,

  /**
   * Ê£ÄÊü•ÊòØÂê¶‰∏∫Â∏ÉÂ∞îÂÄº
   */
  isBoolean: (value: ValidationInput): value is boolean => typeof value === 'boolean',

  /**
   * Ê£ÄÊü•ÊòØÂê¶‰∏∫null
   */
  isNull: (value: ValidationInput): value is null => value === null,

  /**
   * Ê£ÄÊü•ÊòØÂê¶‰∏∫undefined
   */
  isUndefined: (value: ValidationInput): value is undefined => value === undefined,

  /**
   * Ê£ÄÊü•ÊòØÂê¶‰∏∫nullÊàñundefined
   */
  isNullish: (value: ValidationInput): value is null | undefined =>
    value === null || value === undefined,

  /**
   * Ê£ÄÊü•ÊòØÂê¶‰∏∫ÂáΩÊï∞
   */
  isFunction: (value: ValidationInput): value is Function => typeof value === 'function'
} as const;

// ============================================================================
// Â§çÂêàÁ±ªÂûãÂÆàÂç´ - Êï¥ÂêàÂ§çÊùÇÁ±ªÂûãÊ£ÄÊü•
// ============================================================================

/**
 * Â§çÂêàÁ±ªÂûãÂÆàÂç´ÈõÜÂêà
 * Êï¥Âêà object, array Á≠âÂ§çÊùÇÁ±ªÂûãÁöÑÊ£ÄÊü•ÂáΩÊï∞
 */
export const complexTypeGuards = {
  /**
   * Ê£ÄÊü•ÊòØÂê¶‰∏∫ÊôÆÈÄöÂØπË±°ÔºàÊéíÈô§null„ÄÅÊï∞ÁªÑ„ÄÅDateÁ≠âÔºâ
   */
  isObject: (value: ValidationInput): value is GenericObject =>
    typeof value === 'object' &&
    value !== null &&
    !Array.isArray(value) &&
    Object.prototype.toString.call(value) === '[object Object]',

  /**
   * Ê£ÄÊü•ÊòØÂê¶‰∏∫Êï∞ÁªÑ
   */
  isArray: <T = any>(value: ValidationInput): value is T[] => Array.isArray(value),

  /**
   * Ê£ÄÊü•ÊòØÂê¶‰∏∫ÈùûÁ©∫Êï∞ÁªÑ
   */
  isNonEmptyArray: <T = any>(value: ValidationInput): value is [T, ...T[]] =>
    Array.isArray(value) && value.length > 0,

  /**
   * Ê£ÄÊü•ÊòØÂê¶‰∏∫ÊúâÊïàÁöÑJSONÂÄº
   */
  isJsonValue: (value: ValidationInput): boolean => {
    if (value === null) return true;

    const type = typeof value;
    if (type === 'string' || type === 'number' || type === 'boolean') {
      return true;
    }

    if (Array.isArray(value)) {
      return value.every(complexTypeGuards.isJsonValue);
    }

    if (complexTypeGuards.isObject(value)) {
      return Object.values(value).every(complexTypeGuards.isJsonValue);
    }

    return false;
  },

  /**
   * Ê£ÄÊü•ÊòØÂê¶‰∏∫Á©∫ÂØπË±°
   */
  isEmptyObject: (value: ValidationInput): boolean =>
    complexTypeGuards.isObject(value) && Object.keys(value).length === 0,

  /**
   * Ê£ÄÊü•ÊòØÂê¶‰∏∫Á©∫Êï∞ÁªÑ
   */
  isEmptyArray: (value: ValidationInput): boolean => Array.isArray(value) && value.length === 0
} as const;

// ============================================================================
// APIÂìçÂ∫îÁ±ªÂûãÂÆàÂç´ - Êï¥ÂêàAPIÁõ∏ÂÖ≥ÁöÑÈ™åËØÅÂáΩÊï∞
// ============================================================================

/**
 * APIÂìçÂ∫îÁ±ªÂûãÂÆàÂç´ÈõÜÂêà
 * Êï¥ÂêàÂêÑÁßçAPIÂìçÂ∫îÊ†ºÂºèÁöÑÈ™åËØÅÂáΩÊï∞
 */
export const apiTypeGuards = {
  /**
   * Ê£ÄÊü•ÊòØÂê¶‰∏∫Ê†áÂáÜAPIÂìçÂ∫îÊ†ºÂºè
   */
  isStandardApiResponse: (value: ValidationInput): boolean =>
    complexTypeGuards.isObject(value) &&
    basicTypeGuards.isNumber((value as Record<string, any>).code),

  /**
   * Ê£ÄÊü•ÊòØÂê¶‰∏∫ÊàêÂäüÁöÑAPIÂìçÂ∫î
   */
  isSuccessApiResponse: (value: ValidationInput): boolean =>
    apiTypeGuards.isStandardApiResponse(value) && (value as Record<string, any>).code === 200,

  /**
   * Ê£ÄÊü•ÊòØÂê¶‰∏∫ÈîôËØØÁöÑAPIÂìçÂ∫î
   */
  isErrorApiResponse: (value: ValidationInput): boolean =>
    apiTypeGuards.isStandardApiResponse(value) && (value as Record<string, any>).code !== 200,

  /**
   * Ê£ÄÊü•ÊòØÂê¶ÂåÖÂê´dataÂ≠óÊÆµ
   */
  hasDataField: (value: ValidationInput): boolean =>
    complexTypeGuards.isObject(value) && 'data' in value,

  /**
   * Ê£ÄÊü•ÊòØÂê¶‰∏∫ÂàÜÈ°µÂìçÂ∫î
   */
  isPaginatedResponse: (value: ValidationInput): boolean =>
    apiTypeGuards.hasDataField(value) &&
    complexTypeGuards.isObject((value as Record<string, any>).data) &&
    basicTypeGuards.isNumber((value as Record<string, any>).data.total)
} as const;

// ============================================================================
// Èü≥‰πêÊï∞ÊçÆÁ±ªÂûãÂÆàÂç´ - Êï¥ÂêàÈü≥‰πêÁõ∏ÂÖ≥ÁöÑÈ™åËØÅÂáΩÊï∞
// ============================================================================

/**
 * Èü≥‰πêÊï∞ÊçÆÁ±ªÂûãÂÆàÂç´ÈõÜÂêà
 * Êï¥ÂêàÊ≠åÊõ≤„ÄÅËâ∫ÊúØÂÆ∂„ÄÅ‰∏ìËæëÁ≠âÈü≥‰πêÊï∞ÊçÆÁöÑÈ™åËØÅÂáΩÊï∞
 */
export const musicTypeGuards = {
  /**
   * Ê£ÄÊü•ÊòØÂê¶‰∏∫ÊúâÊïàÁöÑÊ≠åÊõ≤ID
   */
  isValidSongId: (value: ValidationInput): value is number =>
    basicTypeGuards.isInteger(value) && value > 0,

  /**
   * Ê£ÄÊü•ÊòØÂê¶‰∏∫ÊúâÊïàÁöÑÊ≠åÊõ≤Êï∞ÊçÆ
   */
  isValidSongData: (value: ValidationInput): boolean =>
    complexTypeGuards.isObject(value) &&
    musicTypeGuards.isValidSongId((value as Record<string, any>).id) &&
    basicTypeGuards.isString((value as Record<string, any>).name),

  /**
   * Ê£ÄÊü•ÊòØÂê¶‰∏∫ÊúâÊïàÁöÑËâ∫ÊúØÂÆ∂Êï∞ÊçÆ
   */
  isValidArtistData: (value: ValidationInput): boolean =>
    complexTypeGuards.isObject(value) &&
    basicTypeGuards.isString((value as Record<string, any>).name),

  /**
   * Ê£ÄÊü•ÊòØÂê¶‰∏∫ÊúâÊïàÁöÑ‰∏ìËæëÊï∞ÊçÆ
   */
  isValidAlbumData: (value: ValidationInput): boolean =>
    complexTypeGuards.isObject(value) &&
    basicTypeGuards.isString((value as Record<string, any>).name),

  /**
   * Ê£ÄÊü•ÊòØÂê¶‰∏∫ÊúâÊïàÁöÑÊí≠ÊîæÂàóË°®Êï∞ÊçÆ
   */
  isValidPlaylistData: (value: ValidationInput): boolean =>
    complexTypeGuards.isObject(value) &&
    musicTypeGuards.isValidSongId((value as Record<string, any>).id) &&
    basicTypeGuards.isString((value as Record<string, any>).name),

  /**
   * Ê£ÄÊü•Ê≠åÊõ≤ÊòØÂê¶ÂèØÊí≠ÊîæÔºàÂü∫‰∫éfeeÂ≠óÊÆµÔºâ
   */
  isSongPlayable: (value: ValidationInput): boolean => {
    if (!musicTypeGuards.isValidSongData(value)) return false;
    const fee = (value as Record<string, any>).fee;
    return fee !== 1 && fee !== 4;
  }
} as const;

// ============================================================================
// Áªü‰∏ÄÂØºÂá∫
// ============================================================================

// ‰∏¥Êó∂ÂØºÂá∫ÔºåÂ∞ÜÂú®‰∏ãÈù¢ÈáçÊñ∞ÂÆö‰πâ

// ============================================================================
// ÈÖçÁΩÆÊï∞ÊçÆÁ±ªÂûãÂÆàÂç´ - Êï¥ÂêàÈÖçÁΩÆÁõ∏ÂÖ≥ÁöÑÈ™åËØÅÂáΩÊï∞
// ============================================================================

/**
 * ÈÖçÁΩÆÊï∞ÊçÆÁ±ªÂûãÂÆàÂç´ÈõÜÂêà
 * Êï¥ÂêàÂ∫îÁî®ÈÖçÁΩÆ„ÄÅÁî®Êà∑ËÆæÁΩÆÁ≠âÈÖçÁΩÆÊï∞ÊçÆÁöÑÈ™åËØÅÂáΩÊï∞
 */
export const configTypeGuards = {
  /**
   * Ê£ÄÊü•ÊòØÂê¶‰∏∫ÊúâÊïàÁöÑ‰ª£ÁêÜÈÖçÁΩÆ
   */
  isValidProxyConfig: (value: ValidationInput): boolean =>
    complexTypeGuards.isObject(value) &&
    basicTypeGuards.isString((value as Record<string, any>).host) &&
    basicTypeGuards.isNumber((value as Record<string, any>).port),

  /**
   * Ê£ÄÊü•ÊòØÂê¶‰∏∫ÊúâÊïàÁöÑÈü≥È¢ëÈÖçÁΩÆ
   */
  isValidAudioConfig: (value: ValidationInput): boolean =>
    complexTypeGuards.isObject(value) &&
    basicTypeGuards.isNumber((value as Record<string, any>).volume) &&
    (value as Record<string, any>).volume >= 0 &&
    (value as Record<string, any>).volume <= 1,

  /**
   * Ê£ÄÊü•ÊòØÂê¶‰∏∫ÊúâÊïàÁöÑ‰∏ªÈ¢òÈÖçÁΩÆ
   */
  isValidThemeConfig: (value: ValidationInput): boolean =>
    complexTypeGuards.isObject(value) &&
    basicTypeGuards.isString((value as Record<string, any>).mode) &&
    ['light', 'dark', 'auto'].includes((value as Record<string, any>).mode),

  /**
   * Ê£ÄÊü•ÊòØÂê¶‰∏∫ÊúâÊïàÁöÑËØ≠Ë®ÄÈÖçÁΩÆ
   */
  isValidLanguageConfig: (value: ValidationInput): boolean =>
    basicTypeGuards.isString(value) && /^[a-z]{2}(-[A-Z]{2})?$/.test(value as string)
} as const;

// ============================================================================
// ÈîôËØØÂ§ÑÁêÜÁ±ªÂûãÂÆàÂç´ - Êï¥ÂêàÈîôËØØÁõ∏ÂÖ≥ÁöÑÈ™åËØÅÂáΩÊï∞
// ============================================================================

/**
 * ÈîôËØØÂ§ÑÁêÜÁ±ªÂûãÂÆàÂç´ÈõÜÂêà
 * Êï¥ÂêàÂêÑÁßçÈîôËØØÁ±ªÂûãÁöÑÈ™åËØÅÂáΩÊï∞
 */
export const errorTypeGuards = {
  /**
   * Ê£ÄÊü•ÊòØÂê¶‰∏∫ErrorÂÆû‰æã
   */
  isError: (value: ValidationInput): value is Error => value instanceof Error,

  /**
   * Ê£ÄÊü•ÊòØÂê¶‰∏∫ÁΩëÁªúÈîôËØØ
   */
  isNetworkError: (value: ValidationInput): boolean =>
    errorTypeGuards.isError(value) &&
    ((value as Error).message.includes('network') ||
      (value as Error).message.includes('fetch') ||
      (value as Record<string, any>).code === 'NETWORK_ERROR'),

  /**
   * Ê£ÄÊü•ÊòØÂê¶‰∏∫Èü≥È¢ëÈîôËØØ
   */
  isAudioError: (value: ValidationInput): boolean =>
    errorTypeGuards.isError(value) &&
    ((value as Error).message.includes('audio') ||
      (value as Record<string, any>).code === 'AUDIO_ERROR'),

  /**
   * Ê£ÄÊü•ÊòØÂê¶‰∏∫APIÈîôËØØ
   */
  isApiError: (value: ValidationInput): boolean =>
    complexTypeGuards.isObject(value) &&
    basicTypeGuards.isNumber((value as Record<string, any>).code) &&
    (value as Record<string, any>).code !== 200,

  /**
   * Ê£ÄÊü•ÊòØÂê¶‰∏∫ÂèØÊÅ¢Â§çÁöÑÈîôËØØ
   */
  isRecoverableError: (value: ValidationInput): boolean =>
    errorTypeGuards.isNetworkError(value) || errorTypeGuards.isAudioError(value)
} as const;

// ============================================================================
// ÊÄßËÉΩ‰ºòÂåñÂ∑•ÂÖ∑ - ÁºìÂ≠òÈ™åËØÅÂô®
// ============================================================================

/**
 * ÂàõÂª∫Â∏¶ÁºìÂ≠òÁöÑÁ±ªÂûãÈ™åËØÅÂô®
 * Áî®‰∫éÊÄßËÉΩÊïèÊÑüÁöÑÂú∫ÊôØÔºåÈÅøÂÖçÈáçÂ§çÈ™åËØÅÁõ∏ÂêåÂØπË±°
 */
export const createCachedValidator = <T>(validator: (value: ValidationInput) => value is T) => {
  const cache = new WeakMap<object, boolean>();

  return (value: ValidationInput): value is T => {
    // Âè™ÂØπÂØπË±°Á±ªÂûã‰ΩøÁî®ÁºìÂ≠ò
    if (typeof value === 'object' && value !== null) {
      if (cache.has(value)) {
        return cache.get(value) as boolean;
      }

      const result = validator(value);
      cache.set(value, result);
      return result;
    }

    return validator(value);
  };
};

/**
 * ÂàõÂª∫ÁªÑÂêàÈ™åËØÅÂô®
 * Â∞ÜÂ§ö‰∏™È™åËØÅÂô®ÁªÑÂêàÊàê‰∏Ä‰∏™
 */
export const createCompositeValidator = <T>(
  validators: Array<(value: ValidationInput) => boolean>
) => {
  return (value: ValidationInput): value is T => {
    return validators.every((validator) => validator(value));
  };
};

/**
 * ÂàõÂª∫Êù°‰ª∂È™åËØÅÂô®
 * Ê†πÊçÆÊù°‰ª∂ÈÄâÊã©‰∏çÂêåÁöÑÈ™åËØÅÂô®
 */
export const createConditionalValidator = <T>(
  condition: (value: ValidationInput) => boolean,
  trueValidator: (value: ValidationInput) => value is T,
  falseValidator: (value: ValidationInput) => value is T
) => {
  return (value: ValidationInput): value is T => {
    return condition(value) ? trueValidator(value) : falseValidator(value);
  };
};

// ============================================================================
// Áªü‰∏ÄÂØºÂá∫ÔºàÊõ¥Êñ∞Ôºâ
// ============================================================================

/**
 * Áªü‰∏ÄÁöÑÁ±ªÂûãÂÆàÂç´Â∑•ÂÖ∑ÈõÜÂêà
 * Êõø‰ª£È°πÁõÆ‰∏≠ÂàÜÊï£ÁöÑÁ±ªÂûãÊ£ÄÊü•ÂáΩÊï∞
 */
export const unifiedTypeGuards = {
  ...basicTypeGuards,
  ...complexTypeGuards,
  ...apiTypeGuards,
  ...musicTypeGuards,
  ...configTypeGuards,
  ...errorTypeGuards
} as const;

/**
 * Â∑•ÂÖ∑ÂáΩÊï∞ÈõÜÂêà
 */
export const typeGuardUtils = {
  createCachedValidator,
  createCompositeValidator,
  createConditionalValidator
} as const;

/**
 * ÈªòËÆ§ÂØºÂá∫Áªü‰∏ÄÁöÑÁ±ªÂûãÂÆàÂç´
 */
export default unifiedTypeGuards;
